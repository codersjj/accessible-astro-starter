<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üåüÁæ§ÊòüÁíÄÁí®0802ÂõΩÈôÖÂΩ±ËßÜÁè≠ÊäΩÁ≠æÁ≥ªÁªü</title>
    <script crossorigin src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
    <script crossorigin src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.5/babel.min.js"></script>
    <style is:global>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            padding: 40px;
            max-width: 600px;
            width: 100%;
            text-align: center;
            position: relative;
        }

        .header {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
            margin-bottom: 10px;
            flex-wrap: wrap;
        }

        .title {
            color: #333;
            font-size: 2.5em;
            font-weight: 700;
            position: relative;
        }

        /* Star emoji interactive styles */
        .star-emoji {
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-block;
            position: relative;
        }

        .star-emoji:hover {
            transform: translateY(-2px) scale(1.1);
        }

        .star-emoji:active {
            transform: scale(1.2);
        }

        .star-emoji.liked {
            animation: starBeat 0.6s ease;
        }

        @keyframes starBeat {
            0% { transform: scale(1); }
            25% { transform: scale(1.3) rotate(15deg); }
            50% { transform: scale(1.1) rotate(-10deg); }
            75% { transform: scale(1.2) rotate(5deg); }
            100% { transform: scale(1) rotate(0deg); }
        }

        /* Floating stars animation */
        .floating-star {
            position: absolute;
            font-size: 24px;
            pointer-events: none;
            animation: starFloatUp 2s ease-out forwards;
            opacity: 1;
        }

        @keyframes starFloatUp {
            0% {
                transform: translateY(0) scale(1) rotate(0deg);
                opacity: 1;
            }
            50% {
                transform: translateY(-50px) scale(1.2) rotate(180deg);
                opacity: 0.8;
            }
            100% {
                transform: translateY(-100px) scale(0.5) rotate(360deg);
                opacity: 0;
            }
        }

        .subtitle {
            color: #666;
            font-size: 1.1em;
            margin-bottom: 40px;
        }

        .picker-section {
            margin-bottom: 30px;
        }

        .result-display {
            background: linear-gradient(135deg, #ff6b6b, #feca57);
            color: white;
            padding: 40px 20px;
            border-radius: 15px;
            margin-bottom: 30px;
            min-height: 120px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            box-shadow: 0 10px 30px rgba(255, 107, 107, 0.3);
            transition: all 0.3s ease;
            position: relative;
        }

        .result-display.picking {
            animation: pulse 0.5s infinite alternate;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            100% { transform: scale(1.05); }
        }

        .audio-toggle {
            position: absolute;
            top: 12px;
            right: 12px;
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 12px;
            padding: 5px 5px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 0.9em;
            font-weight: 600;
            color: white;
            transition: all 0.3s ease;
            min-width: 50px;
            justify-content: center;
        }

        .audio-toggle:hover {
            background: rgba(255, 255, 255, 0.3);
            border-color: rgba(255, 255, 255, 0.5);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .audio-toggle.enabled {
            background: rgba(76, 175, 80, 0.3);
            border-color: rgba(76, 175, 80, 0.5);
        }

        .audio-toggle.enabled:hover {
            background: rgba(76, 175, 80, 0.4);
        }

        .audio-toggle.disabled {
            background: rgba(244, 67, 54, 0.3);
            border-color: rgba(244, 67, 54, 0.5);
        }

        .audio-toggle.disabled:hover {
            background: rgba(244, 67, 54, 0.4);
        }

        .audio-icon {
            font-size: 1.1em;
            transition: transform 0.3s ease;
        }

        .audio-toggle:hover .audio-icon {
            transform: scale(1.1);
        }

        .result-name {
            font-size: 2.5em;
            font-weight: bold;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
        }

        .result-english {
            font-size: 1.5em;
            opacity: 0.9;
        }

        .empty-result {
            color: rgba(255, 255, 255, 0.7);
            font-size: 1.2em;
        }

        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
            margin-bottom: 30px;
        }

        .mode-selector {
            background: rgba(102, 126, 234, 0.1);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            text-align: center;
        }

        .mode-title {
            font-size: 1.1em;
            font-weight: 600;
            color: #333;
            margin-bottom: 15px;
        }

        .mode-options {
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .mode-option {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 12px 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 180px;
            text-align: center;
        }

        .mode-option:hover {
            border-color: #667eea;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.2);
        }

        .mode-option.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-color: #667eea;
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .mode-label {
            font-weight: 600;
            margin-bottom: 5px;
        }

        .mode-desc {
            font-size: 0.85em;
            opacity: 0.8;
        }

        .btn {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: .3rem;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1em;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn-success {
            background: linear-gradient(135deg, #48c78e, #06d6a0);
        }

        .btn-warning {
            background: linear-gradient(135deg, #feca57, #ff9ff3);
        }

        .btn-info {
            background: linear-gradient(135deg, #54a0ff, #5f27cd);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .config-section {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 20px;
            margin-top: 30px;
        }

        .config-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            padding: 10px 0;
        }

        .config-title {
            font-size: 1.2em;
            font-weight: 600;
            color: #333;
        }

        .toggle-icon {
            font-size: 1.2em;
            color: #667eea;
            transition: transform 0.3s ease;
        }

        .toggle-icon.rotated {
            transform: rotate(180deg);
        }

        .config-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
        }

        .config-content.expanded {
            max-height: 600px;
        }

        .student-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 10px;
            margin: 20px 0;
            max-height: 300px;
            overflow-y: auto;
        }

        .student-item {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s ease;
        }

        .student-item.picked {
            background: #f8f9fa;
            opacity: 0.6;
            border-color: #dee2e6;
        }

        .student-item:hover:not(.picked) {
            border-color: #667eea;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .student-info {
            text-align: left;
        }

        .student-chinese {
            font-weight: 600;
            color: #333;
            margin-bottom: 2px;
        }

        .student-english {
            font-size: 0.9em;
            color: #666;
        }

        .delete-btn {
            background: #ff6b6b;
            color: white;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .delete-btn:hover {
            background: #ff5252;
            transform: scale(1.1);
        }

        .add-student {
            display: flex;
            gap: 10px;
            margin-top: 20px;
            flex-wrap: wrap;
        }

        .add-input {
            flex: 1;
            padding: 10px 15px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 1em;
            min-width: 120px;
            transition: border-color 0.3s ease;
        }

        .add-input:focus {
            outline: none;
            border-color: #667eea;
        }

        .stats {
            display: flex;
            justify-content: space-around;
            margin: 20px 0;
            padding: 15px;
            background: rgba(102, 126, 234, 0.1);
            border-radius: 10px;
        }

        .stat-item {
            text-align: center;
        }

        .stat-number {
            font-size: 1.5em;
            font-weight: bold;
            color: #667eea;
        }

        .stat-label {
            font-size: 0.9em;
            color: #666;
            margin-top: 5px;
        }

        /* Sonner Toast Ê†∑ÂºèË¶ÜÁõñ */
        [data-sonner-toaster] {
            --toast-bg: white;
            --toast-border: rgb(229, 231, 235);
            --toast-text: rgb(15, 23, 42);
            --toast-success-bg: rgb(240, 253, 244);
            --toast-success-border: rgb(34, 197, 94);
            --toast-success-text: rgb(21, 128, 61);
            --toast-error-bg: rgb(254, 242, 242);
            --toast-error-border: rgb(239, 68, 68);
            --toast-error-text: rgb(185, 28, 28);
            --toast-warning-bg: rgb(255, 251, 235);
            --toast-warning-border: rgb(245, 158, 11);
            --toast-warning-text: rgb(146, 64, 14);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        [data-sonner-toast] {
            border-radius: 12px !important;
            border: 2px solid var(--toast-border) !important;
            font-size: 14px !important;
            font-weight: 500 !important;
        }

        [data-sonner-toast][data-type="success"] {
            background-color: var(--toast-success-bg) !important;
            border-color: var(--toast-success-border) !important;
            color: var(--toast-success-text) !important;
        }

        [data-sonner-toast][data-type="error"] {
            background-color: var(--toast-error-bg) !important;
            border-color: var(--toast-error-border) !important;
            color: var(--toast-error-text) !important;
        }

        [data-sonner-toast][data-type="warning"] {
            background-color: var(--toast-warning-bg) !important;
            border-color: var(--toast-warning-border) !important;
            color: var(--toast-warning-text) !important;
        }

        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                gap: 10px;
            }
            
            .title {
                font-size: 2em;
            }
            
            .audio-toggle {
                top: 10px;
                right: 10px;
                padding: 5px 5px;
                font-size: 0.8em;
                min-width: 50px;
            }
            
            .result-display {
                padding: 30px 15px;
            }
        }
    </style>
</head>
<body>
    <div id="toaster-root"></div>
    <div class="container">
        <div class="header">
            <h1 class="title">
                <span class="star-emoji" id="starEmoji">üåü</span>Áæ§ÊòüÁíÄÁí®0802ÂõΩÈôÖÂΩ±ËßÜÁè≠ÊäΩÁ≠æÁ≥ªÁªü
            </h1>
        </div>
        <p class="subtitle">‰ΩøÁî® Fisher-Yates ÈöèÊú∫ÂåñÁÆóÊ≥ïÔºåÂÖ¨Âπ≥„ÄÅÈöèÊú∫</p>
        
        <div class="picker-section">
            <div class="mode-selector">
                <div class="mode-title">üéÆ ÊäΩÁ≠æÊ®°Âºè</div>
                <div class="mode-options">
                    <div class="mode-option active" id="noRepeatMode">
                        <div class="mode-label">üéØ ‰∏çÈáçÂ§çÊ®°Âºè</div>
                        <div class="mode-desc">ÊäΩËøáÁöÑÂ≠¶Áîü‰∏ç‰ºöÂÜçË¢´ÊäΩÂà∞</div>
                    </div>
                    <div class="mode-option" id="repeatMode">
                        <div class="mode-label">üîÑ ÈáçÂ§çÊ®°Âºè</div>
                        <div class="mode-desc">ÊØèÊ¨°ÈÉΩ‰ªéÊâÄÊúâÂ≠¶Áîü‰∏≠ÈöèÊú∫ÊäΩÂèñ</div>
                    </div>
                </div>
            </div>

            <div class="result-display" id="resultDisplay">
                <div class="audio-toggle" id="audioToggle">
                    <span class="audio-icon" id="audioIcon">üîä</span>
                    <span id="audioText">Êí≠Êä•</span>
                </div>
                <div class="empty-result">ÁÇπÂáª‰∏ãÊñπ‚Äúüé≤ ÂºÄÂßãÊäΩÁ≠æ‚ÄùÊåâÈíÆÂºÄÂßãÊäΩÁ≠æ</div>
            </div>
            
            <div class="controls">
                <button class="btn btn-success" id="pickBtn">üé≤ ÂºÄÂßãÊäΩÁ≠æ</button>
                <button class="btn btn-warning" id="resetBtn">üîÑ ÈáçÁΩÆÊâÄÊúâ</button>
                <button class="btn btn-info" id="configBtn">‚öôÔ∏è ÁÆ°ÁêÜÂ≠¶Áîü</button>
            </div>
        </div>

        <div class="config-section">
            <div class="config-header" id="configHeader">
                <span class="config-title">Â≠¶ÁîüÁÆ°ÁêÜ</span>
                <span class="toggle-icon" id="toggleIcon">‚ñº</span>
            </div>
            <div class="config-content" id="configContent">
                <div class="stats">
                    <div class="stat-item">
                        <div class="stat-number" id="totalStudents">32</div>
                        <div class="stat-label">ÊÄª‰∫∫Êï∞</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="remainingStudents">32</div>
                        <div class="stat-label">Ââ©‰Ωô‰∫∫Êï∞</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="pickedCount">0</div>
                        <div class="stat-label">Â∑≤ÊäΩÂèñ</div>
                    </div>
                </div>
                
                <div class="add-student">
                    <input type="text" class="add-input" id="chineseNameInput" placeholder="‰∏≠ÊñáÂêç">
                    <input type="text" class="add-input" id="englishNameInput" placeholder="Ëã±ÊñáÂêç">
                    <button class="btn" id="addStudentBtn">
                      <svg width="24" height="24" viewBox="0 0 24 24">
                        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z" fill="#ffffff"/>
                      </svg>
                      Ê∑ªÂä†
                    </button>
                </div>
                
                <div class="student-list" id="studentList"></div>
            </div>
        </div>
    </div>

    <script type="text/babel">
        // Sonner Toast ÁªÑ‰ª∂ (ÁÆÄÂåñÁâà)
        const { useState, useEffect, useCallback } = React;

        const Sonner = () => {
            const [toasts, setToasts] = useState([]);
            
            const addToast = useCallback((type, title, options = {}) => {
                const id = Date.now() + Math.random();
                const newToast = {
                    id,
                    type,
                    title,
                    description: options.description,
                    action: options.action,
                    duration: options.duration || 4000
                };
                
                setToasts(prev => [...prev, newToast]);
                
                // Ëá™Âä®ÁßªÈô§
                setTimeout(() => {
                    setToasts(prev => prev.filter(toast => toast.id !== id));
                }, newToast.duration);
                
                return id;
            }, []);

            const removeToast = useCallback((id) => {
                setToasts(prev => prev.filter(toast => toast.id !== id));
            }, []);

            // ÂÖ®Â±Ä toast ÊñπÊ≥ï
            useEffect(() => {
                window.toast = {
                    success: (title, options) => addToast('success', title, options),
                    error: (title, options) => addToast('error', title, options),
                    warning: (title, options) => addToast('warning', title, options),
                    info: (title, options) => addToast('info', title, options),
                };
            }, [addToast]);

            return React.createElement('div', {
                'data-sonner-toaster': '',
                style: {
                    position: 'fixed',
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    zIndex: 999999,
                    pointerEvents: 'none'
                }
            }, React.createElement('div', {
                style: {
                    position: 'fixed',
                    top: '20px',
                    right: '20px',
                    display: 'flex',
                    flexDirection: 'column',
                    gap: '8px',
                    maxWidth: '356px',
                    width: '100%'
                }
            }, toasts.map(toast => 
                React.createElement('div', {
                    key: toast.id,
                    'data-sonner-toast': '',
                    'data-type': toast.type,
                    style: {
                        pointerEvents: 'auto',
                        backgroundColor: 'white',
                        border: '2px solid rgb(229, 231, 235)',
                        borderRadius: '12px',
                        padding: '12px 16px',
                        boxShadow: '0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)',
                        animation: 'slideIn 0.2s ease-out',
                        cursor: 'pointer'
                    },
                    onClick: () => removeToast(toast.id)
                }, [
                    React.createElement('div', {
                        key: 'title',
                        style: { fontWeight: '600', marginBottom: '4px' }
                    }, toast.title),
                    toast.description && React.createElement('div', {
                        key: 'desc',
                        style: { fontSize: '14px', opacity: '0.8' }
                    }, toast.description),
                    toast.action && React.createElement('div', {
                        key: 'action',
                        style: { marginTop: '8px' }
                    }, toast.action)
                ].filter(Boolean))
            )));
        };

        // ÊåÇËΩΩ Sonner ÁªÑ‰ª∂
        ReactDOM.render(React.createElement(Sonner), document.getElementById('toaster-root'));

        // Ê∑ªÂä†Âä®ÁîªÊ†∑Âºè
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideIn {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
        `;
        document.head.appendChild(style);
    </script>

    <script>
        class StudentPicker {
            constructor() {
                this.students = [
                    { chinese: 'ÈôàÊô®', english: 'Ashely', picked: false },
                    { chinese: 'ÈôàÁ°ïÈ¢ñ', english: 'Chloe', picked: false },
                    { chinese: 'ÈôàÊÄùË®Ä', english: 'Cyan', picked: false },
                    { chinese: '‰ª£ÁùøÊù∞', english: 'Blair', picked: false },
                    { chinese: 'Ë¥æÈáëÂù°', english: 'Jasper', picked: false },
                    { chinese: 'ÂßúÊò•', english: 'kami', picked: false },
                    { chinese: 'Â≠îÊÄùÈâ¥', english: 'Kyson', picked: false },
                    { chinese: 'ÊùéÁ¢ßÂéü', english: '', picked: false },
                    { chinese: 'ÊùéÁª¥Ê¨¢', english: 'Jesse', picked: false },
                    { chinese: 'Ê¢ÅÁëûÂ∞ß', english: 'Henry', picked: false },
                    { chinese: 'Âªñ‰ºäÁÜô', english: 'Ivy', picked: false },
                    { chinese: 'ÊûóÁ••Ëæâ', english: 'Derrick', picked: false },
                    { chinese: 'Âàò‰Ω≥‰πê', english: 'Leo', picked: false },
                    { chinese: 'Ê≤ô‰øäÊù∞', english: 'Shane', picked: false },
                    { chinese: 'ÂÆãÈõ®Èúè', english: 'Yrunn', picked: false },
                    { chinese: 'Â≠ôÂòâÊÄø', english: 'seven', picked: false },
                    { chinese: 'ÁéãÂÆáÈúû', english: 'Yuki', picked: false },
                    { chinese: 'Áéã‰æùÂÆÅ', english: 'Jannie', picked: false },
                    { chinese: '‰ºç‰∏ôÁ´†', english: 'Rose', picked: false },
                    { chinese: 'Âê¥ÁëûÈπè', english: 'Raptor', picked: false },
                    { chinese: 'Âê¥ÊñáÁÖú', english: 'Bianca', picked: false },
                    { chinese: 'Ë∞¢‰ΩôÊòü', english: 'Rory', picked: false },
                    { chinese: 'Êî∏ÁáïÂßø', english: 'Vania', picked: false },
                    { chinese: 'Âè∂ÊñáÈîã', english: 'Alan', picked: false },
                    { chinese: 'Êù®ËãëËâ∫', english: 'YE', picked: false },
                    { chinese: 'Êù®Èõ®Ê¨£', english: 'Mira', picked: false },
                    { chinese: 'Âº†Êµ∑Ê¶ï', english: 'Sea', picked: false },
                    { chinese: 'Âº†ÈáëÁàΩ', english: 'Aria', picked: false },
                    { chinese: 'Âº†ÈæôÊñ∞', english: 'SMITH', picked: false },
                    { chinese: 'Âº†Ê¨£', english: 'Lucky', picked: false },
                    { chinese: 'Êú±Áà±Áê¥', english: 'Lily', picked: false },
                    { chinese: 'Êú±Ë±™Êù∞', english: 'Clover', picked: false }
                ];
                this.isRepeatMode = false; // false: ‰∏çÈáçÂ§çÊ®°Âºè, true: ÈáçÂ§çÊ®°Âºè
                this.playbackRate = 0.75;
                this.audioContext = null;
                this.audioInitialized = false;
                this.audioEnabled = true; // Èü≥È¢ëÊí≠Êä•ÂºÄÂÖ≥
                this.initializeElements();
                this.bindEvents();
                this.updateDisplay();
                this.updateAudioToggleUI();
            }

            initializeElements() {
                this.resultDisplay = document.getElementById('resultDisplay');
                this.pickBtn = document.getElementById('pickBtn');
                this.resetBtn = document.getElementById('resetBtn');
                this.configBtn = document.getElementById('configBtn');
                this.configHeader = document.getElementById('configHeader');
                this.configContent = document.getElementById('configContent');
                this.toggleIcon = document.getElementById('toggleIcon');
                this.studentList = document.getElementById('studentList');
                this.chineseNameInput = document.getElementById('chineseNameInput');
                this.englishNameInput = document.getElementById('englishNameInput');
                this.addStudentBtn = document.getElementById('addStudentBtn');
                this.totalStudents = document.getElementById('totalStudents');
                this.remainingStudents = document.getElementById('remainingStudents');
                this.pickedCount = document.getElementById('pickedCount');
                this.noRepeatMode = document.getElementById('noRepeatMode');
                this.repeatMode = document.getElementById('repeatMode');
                this.starEmoji = document.getElementById('starEmoji');
                this.audioToggle = document.getElementById('audioToggle');
                this.audioIcon = document.getElementById('audioIcon');
                this.audioText = document.getElementById('audioText');
            }

            bindEvents() {
                this.pickBtn.addEventListener('click', () => this.pickStudent());
                this.resetBtn.addEventListener('click', () => this.resetAll());
                this.configBtn.addEventListener('click', () => this.toggleConfig());
                this.configHeader.addEventListener('click', () => this.toggleConfig());
                this.addStudentBtn.addEventListener('click', () => this.addStudent());
                this.noRepeatMode.addEventListener('click', () => this.setMode(false));
                this.repeatMode.addEventListener('click', () => this.setMode(true));
                this.starEmoji.addEventListener('click', () => this.handleStarClick());
                this.audioToggle.addEventListener('click', () => this.toggleAudio());
                
                // ‰ΩøÁî®‰∫ã‰ª∂ÂßîÊâòÂ§ÑÁêÜÂà†Èô§ÊåâÈíÆÁÇπÂáª
                this.studentList.addEventListener('click', (e) => {
                    if (e.target.classList.contains('delete-btn')) {
                        const index = parseInt(e.target.dataset.index);
                        this.deleteStudent(index);
                    }
                });
                
                // ÂõûËΩ¶ÈîÆÊ∑ªÂä†Â≠¶Áîü
                [this.chineseNameInput, this.englishNameInput].forEach(input => {
                    input.addEventListener('keypress', (e) => {
                        if (e.key === 'Enter') this.addStudent();
                    });
                });
            }

            // Èü≥È¢ëÊí≠Êä•ÂºÄÂÖ≥
            toggleAudio() {
                this.audioEnabled = !this.audioEnabled;
                this.updateAudioToggleUI();
                
                if (window.toast) {
                    window.toast.info('üîä Èü≥È¢ëËÆæÁΩÆ', {
                        description: this.audioEnabled ? 'ËØ≠Èü≥Êí≠Êä•Â∑≤ÂºÄÂêØ' : 'ËØ≠Èü≥Êí≠Êä•Â∑≤ÂÖ≥Èó≠'
                    });
                }
            }

            updateAudioToggleUI() {
                if (this.audioEnabled) {
                    this.audioToggle.classList.remove('disabled');
                    this.audioToggle.classList.add('enabled');
                    this.audioIcon.textContent = 'üîä';
                    this.audioText.textContent = 'Êí≠Êä•';
                } else {
                    this.audioToggle.classList.remove('enabled');
                    this.audioToggle.classList.add('disabled');
                    this.audioIcon.textContent = 'üîá';
                    this.audioText.textContent = 'ÈùôÈü≥';
                }
            }

            // ËØ≠Èü≥Êí≠Êä•ÂäüËÉΩ
            speakResult(chinese, english) {
                if (!this.audioEnabled) return;
                
                // Ê£ÄÊü•ÊµèËßàÂô®ÊòØÂê¶ÊîØÊåÅËØ≠Èü≥ÂêàÊàê
                if (!('speechSynthesis' in window)) {
                    console.log('ÊµèËßàÂô®‰∏çÊîØÊåÅËØ≠Èü≥ÂêàÊàê');
                    return;
                }

                try {
                    // ÂÅúÊ≠¢‰πãÂâçÁöÑÊí≠Êä•
                    window.speechSynthesis.cancel();
                    
                    // ÊûÑÂª∫Êí≠Êä•ÊñáÊú¨
                    let textToSpeak = `ÊäΩÂà∞‰∫Ü ${chinese}`;
                    if (english) {
                        textToSpeak += `Ôºå${english}`;
                    }
                    
                    const utterance = new SpeechSynthesisUtterance(textToSpeak);
                    
                    // ËÆæÁΩÆËØ≠Èü≥ÂèÇÊï∞
                    utterance.lang = 'zh-CN'; // ‰∏≠Êñá
                    utterance.rate = 0.9; // ËØ≠ÈÄü
                    utterance.pitch = 1.1; // Èü≥Ë∞É
                    utterance.volume = 0.8; // Èü≥Èáè
                    
                    // Â∞ùËØï‰ΩøÁî®‰∏≠ÊñáËØ≠Èü≥
                    const voices = window.speechSynthesis.getVoices();
                    const chineseVoice = voices.find(voice => 
                        voice.lang.includes('zh') || voice.name.includes('Chinese')
                    );
                    if (chineseVoice) {
                        utterance.voice = chineseVoice;
                    }
                    
                    // ÂºÄÂßãÊí≠Êä•
                    window.speechSynthesis.speak(utterance);
                    
                } catch (error) {
                    console.log('ËØ≠Èü≥Êí≠Êä•Â§±Ë¥•:', error);
                }
            }

            // Star emoji click functionality
            handleStarClick() {
                this.starEmoji.classList.add('liked');
                this.createFloatingStar();
                this.playSound();
                
                // Remove animation class after animation completes
                setTimeout(() => {
                    this.starEmoji.classList.remove('liked');
                }, 600);
            }

            createFloatingStar() {
                const star = document.createElement('div');
                star.className = 'floating-star';
                star.textContent = 'üåü';
                star.style.left = '0px';
                star.style.top = '0px';
                
                this.starEmoji.style.position = 'relative';
                this.starEmoji.appendChild(star);
                
                setTimeout(() => {
                    star.remove();
                }, 2000);
            }

            initAudioContext() {
                if (!this.audioInitialized) {
                    try {
                        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
                        this.audioInitialized = true;
                        
                        // Resume audio context if it's suspended
                        if (this.audioContext.state === 'suspended') {
                            this.audioContext.resume();
                        }
                    } catch (error) {
                        console.log('Audio not supported:', error);
                        this.audioInitialized = false;
                    }
                }
            }

            playSound() {
                // Initialize audio context on first user interaction
                this.initAudioContext();
                
                if (!this.audioContext || !this.audioInitialized) {
                    return; // Silently fail if audio is not available
                }

                try {
                    // Ensure audio context is running
                    if (this.audioContext.state === 'suspended') {
                        this.audioContext.resume();
                    }

                    const oscillator = this.audioContext.createOscillator();
                    const gainNode = this.audioContext.createGain();
                    
                    oscillator.connect(gainNode);
                    gainNode.connect(this.audioContext.destination);
                    
                    // Create a pleasant "pop" sound with current playback rate
                    const baseFreq = 800;
                    const endFreq = 200;
                    
                    oscillator.frequency.setValueAtTime(baseFreq * this.playbackRate, this.audioContext.currentTime);
                    oscillator.frequency.exponentialRampToValueAtTime(endFreq * this.playbackRate, this.audioContext.currentTime + 0.1);
                    
                    gainNode.gain.setValueAtTime(0.3, this.audioContext.currentTime);
                    gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.1);
                    
                    oscillator.start(this.audioContext.currentTime);
                    oscillator.stop(this.audioContext.currentTime + 0.1);
                    
                    // Increase playback rate for next click
                    this.playbackRate += 0.1;
                    if (this.playbackRate > 2) this.playbackRate = 0.75;
                    
                } catch (error) {
                    console.log('Audio playback failed:', error);
                    // Silently fail - don't show error to user
                }
            }

            // Fisher-Yates ÈöèÊú∫ÂåñÁÆóÊ≥ï
            fisherYatesShuffle(array) {
                const shuffled = [...array];
                for (let i = shuffled.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
                }
                return shuffled;
            }

            pickStudent() {
                let candidateStudents;
                
                if (this.isRepeatMode) {
                    // ÈáçÂ§çÊ®°ÂºèÔºö‰ªéÊâÄÊúâÂ≠¶Áîü‰∏≠ÈÄâÊã©
                    candidateStudents = this.students;
                } else {
                    // ‰∏çÈáçÂ§çÊ®°ÂºèÔºöÂè™‰ªéÊú™Ë¢´ÊäΩÂèñÁöÑÂ≠¶Áîü‰∏≠ÈÄâÊã©
                    candidateStudents = this.students.filter(student => !student.picked);
                }
                
                if (candidateStudents.length === 0) {
                    this.showResult('ÊâÄÊúâÂ≠¶ÁîüÈÉΩÂ∑≤Ë¢´ÊäΩÂèñÔºÅ', 'ËØ∑ÁÇπÂáªÈáçÁΩÆÂºÄÂßãÊñ∞‰∏ÄËΩÆ');
                    return;
                }

                // Ê∑ªÂä†ÊäΩÁ≠æÂä®Áîª
                this.resultDisplay.classList.add('picking');
                this.pickBtn.disabled = true;
                
                // ‰ΩøÁî® Fisher-Yates ÁÆóÊ≥ïÈöèÊú∫ÈÄâÊã©
                const shuffled = this.fisherYatesShuffle(candidateStudents);
                const selectedStudent = shuffled[0];
                
                // Ê®°ÊãüÊäΩÁ≠æËøáÁ®ã
                let counter = 0;
                const animationInterval = setInterval(() => {
                    const randomStudent = candidateStudents[Math.floor(Math.random() * candidateStudents.length)];
                    this.showResult(randomStudent.chinese, randomStudent.english || '');
                    counter++;
                    
                    if (counter > 10) {
                        clearInterval(animationInterval);
                        // ÊòæÁ§∫ÊúÄÁªàÁªìÊûú
                        if (!this.isRepeatMode) {
                            selectedStudent.picked = true;
                        }
                        this.showResult(selectedStudent.chinese, selectedStudent.english || '');
                        this.resultDisplay.classList.remove('picking');
                        this.pickBtn.disabled = false;
                        this.updateDisplay();
                        
                        // Êí≠Êä•ÁªìÊûú
                        setTimeout(() => {
                            this.speakResult(selectedStudent.chinese, selectedStudent.english);
                        }, 500);
                    }
                }, 100);
            }

            showResult(chinese, english) {
                this.resultDisplay.innerHTML = `
                    <div class="audio-toggle ${this.audioEnabled ? 'enabled' : 'disabled'}" id="audioToggle">
                        <span class="audio-icon" id="audioIcon">${this.audioEnabled ? 'üîä' : 'üîá'}</span>
                        <span id="audioText">${this.audioEnabled ? 'Êí≠Êä•' : 'ÈùôÈü≥'}</span>
                    </div>
                    <div class="result-name">${chinese}</div>
                    ${english ? `<div class="result-english">${english}</div>` : ''}
                `;
                
                // ÈáçÊñ∞ÁªëÂÆöÈü≥È¢ëÂàáÊç¢ÊåâÈíÆ‰∫ã‰ª∂
                const newAudioToggle = document.getElementById('audioToggle');
                const newAudioIcon = document.getElementById('audioIcon');
                const newAudioText = document.getElementById('audioText');
                
                if (newAudioToggle) {
                    this.audioToggle = newAudioToggle;
                    this.audioIcon = newAudioIcon;
                    this.audioText = newAudioText;
                    this.audioToggle.addEventListener('click', () => this.toggleAudio());
                }
            }

            resetAll() {
                this.students.forEach(student => student.picked = false);
                this.resultDisplay.innerHTML = `
                    <div class="audio-toggle ${this.audioEnabled ? 'enabled' : 'disabled'}" id="audioToggle">
                        <span class="audio-icon" id="audioIcon">${this.audioEnabled ? 'üîä' : 'üîá'}</span>
                        <span id="audioText">${this.audioEnabled ? 'Êí≠Êä•' : 'ÈùôÈü≥'}</span>
                    </div>
                    <div class="empty-result">ÁÇπÂáª‰∏ãÊñπ‚Äúüé≤ ÂºÄÂßãÊäΩÁ≠æ‚ÄùÊåâÈíÆÂºÄÂßãÊäΩÁ≠æ</div>
                `;
                
                // ÈáçÊñ∞ÁªëÂÆöÈü≥È¢ëÂàáÊç¢ÊåâÈíÆ‰∫ã‰ª∂
                const newAudioToggle = document.getElementById('audioToggle');
                const newAudioIcon = document.getElementById('audioIcon');
                const newAudioText = document.getElementById('audioText');
                
                if (newAudioToggle) {
                    this.audioToggle = newAudioToggle;
                    this.audioIcon = newAudioIcon;
                    this.audioText = newAudioText;
                    this.audioToggle.addEventListener('click', () => this.toggleAudio());
                }
                
                this.updateDisplay();
                
                // ‰ΩøÁî® Sonner ÊòæÁ§∫ÈáçÁΩÆÊàêÂäüÊ∂àÊÅØ
                if (window.toast) {
                    window.toast.success('üîÑ ÈáçÁΩÆÊàêÂäü', {
                        description: 'ÊâÄÊúâÂ≠¶ÁîüÁä∂ÊÄÅÂ∑≤ÈáçÁΩÆÔºåÂèØ‰ª•ÈáçÊñ∞ÂºÄÂßãÊäΩÁ≠æ'
                    });
                }
            }

            setMode(isRepeatMode) {
                this.isRepeatMode = isRepeatMode;
                
                // Êõ¥Êñ∞UIÁä∂ÊÄÅ
                if (isRepeatMode) {
                    this.repeatMode.classList.add('active');
                    this.noRepeatMode.classList.remove('active');
                } else {
                    this.noRepeatMode.classList.add('active');
                    this.repeatMode.classList.remove('active');
                }
                
                // ÈáçÁΩÆÊâÄÊúâÂ≠¶ÁîüÁä∂ÊÄÅÔºàÂàáÊç¢Âà∞ÈáçÂ§çÊ®°ÂºèÊó∂Ê∏ÖÈô§Â∑≤ÊäΩÂèñÊ†áËÆ∞Ôºâ
                if (isRepeatMode) {
                    this.students.forEach(student => student.picked = false);
                }
                
                this.updateDisplay();
                
                // ‰ΩøÁî® Sonner ÊòæÁ§∫Ê®°ÂºèÂàáÊç¢Ê∂àÊÅØ
                if (window.toast) {
                    window.toast.info('üéÆ Ê®°ÂºèÂàáÊç¢', {
                        description: isRepeatMode ? 'Â∑≤ÂàáÊç¢Âà∞ÈáçÂ§çÊ®°Âºè' : 'Â∑≤ÂàáÊç¢Âà∞‰∏çÈáçÂ§çÊ®°Âºè'
                    });
                }
            }

            toggleConfig() {
                const isExpanded = this.configContent.classList.contains('expanded');
                if (isExpanded) {
                    this.configContent.classList.remove('expanded');
                    this.toggleIcon.classList.remove('rotated');
                } else {
                    this.configContent.classList.add('expanded');
                    this.toggleIcon.classList.add('rotated');
                }
            }

            addStudent() {
                const chinese = this.chineseNameInput.value.trim();
                const english = this.englishNameInput.value.trim();
                
                if (!chinese) {
                    if (window.toast) {
                        window.toast.warning('‚ö†Ô∏è ËæìÂÖ•ÈîôËØØ', {
                            description: 'ËØ∑ËæìÂÖ•‰∏≠ÊñáÂêçÔºÅ'
                        });
                    }
                    return;
                }
                
                // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®
                const exists = this.students.some(student => 
                    student.chinese === chinese || (english && student.english === english)
                );
                
                if (exists) {
                    if (window.toast) {
                        window.toast.warning('‚ö†Ô∏è Â≠¶ÁîüÂ∑≤Â≠òÂú®', {
                            description: 'ËØ•Â≠¶ÁîüÂ∑≤ÁªèÂú®ÂàóË°®‰∏≠‰∫ÜÔºÅ'
                        });
                    }
                    return;
                }
                
                this.students.push({
                    chinese: chinese,
                    english: english,
                    picked: false
                });
                
                this.chineseNameInput.value = '';
                this.englishNameInput.value = '';
                this.updateDisplay();
                
                // ‰ΩøÁî® Sonner ÊòæÁ§∫Ê∑ªÂä†ÊàêÂäüÊ∂àÊÅØ
                if (window.toast) {
                    window.toast.success('‚úÖ Â≠¶ÁîüÊ∑ªÂä†ÊàêÂäü', {
                        description: `${chinese}${english ? ` (${english})` : ''} Â∑≤Ê∑ªÂä†Âà∞Áè≠Á∫ßÂêçÂçï`
                    });
                }
            }

            deleteStudent(index) {
                const student = this.students[index];
                if (!student) return;
                
                // ‰ΩøÁî® Sonner ÊòæÁ§∫Á°ÆËÆ§Âà†Èô§ÁöÑ Toast
                if (window.toast) {
                    const confirmButton = React.createElement('button', {
                        style: {
                            background: '#ef4444',
                            color: 'white',
                            border: 'none',
                            borderRadius: '6px',
                            padding: '6px 12px',
                            cursor: 'pointer',
                            fontSize: '12px',
                            fontWeight: '500'
                        },
                        onClick: () => {
                            this.students.splice(index, 1);
                            this.updateDisplay();
                            
                            // ÊòæÁ§∫Âà†Èô§ÊàêÂäüÊ∂àÊÅØ
                            window.toast.success('üóëÔ∏è Â≠¶ÁîüÂà†Èô§ÊàêÂäü', {
                                description: `${student.chinese}${student.english ? ` (${student.english})` : ''} Â∑≤‰ªéÁè≠Á∫ßÂêçÂçï‰∏≠ÁßªÈô§`
                            });
                        }
                    }, 'Á°ÆËÆ§Âà†Èô§');
                    
                    const cancelButton = React.createElement('button', {
                        style: {
                            background: '#6b7280',
                            color: 'white',
                            border: 'none',
                            borderRadius: '6px',
                            padding: '6px 12px',
                            cursor: 'pointer',
                            fontSize: '12px',
                            fontWeight: '500',
                            marginLeft: '8px'
                        },
                        onClick: () => {
                            // Toast ‰ºöËá™Âä®ÂÖ≥Èó≠ÔºåËøôÈáå‰∏çÈúÄË¶ÅÈ¢ùÂ§ñÊìç‰Ωú
                        }
                    }, 'ÂèñÊ∂à');
                    
                    const actionDiv = React.createElement('div', {
                        style: { display: 'flex', gap: '8px', marginTop: '8px' }
                    }, confirmButton, cancelButton);
                    
                    window.toast.warning('üóëÔ∏è Á°ÆËÆ§Âà†Èô§Â≠¶Áîü', {
                        description: `Á°ÆÂÆöË¶ÅÂà†Èô§ ${student.chinese}${student.english ? ` (${student.english})` : ''} ÂêóÔºü`,
                        action: actionDiv,
                        duration: 8000
                    });
                }
            }

            updateDisplay() {
                // Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
                const total = this.students.length;
                const picked = this.students.filter(s => s.picked).length;
                const remaining = this.isRepeatMode ? total : total - picked;
                
                this.totalStudents.textContent = total;
                this.remainingStudents.textContent = remaining;
                this.pickedCount.textContent = picked;
                
                // Êõ¥Êñ∞Â≠¶ÁîüÂàóË°®
                this.studentList.innerHTML = '';
                this.students.forEach((student, index) => {
                    const studentItem = document.createElement('div');
                    studentItem.className = `student-item ${(!this.isRepeatMode && student.picked) ? 'picked' : ''}`;
                    studentItem.innerHTML = `
                        <div class="student-info">
                            <div class="student-chinese">${student.chinese}</div>
                            ${student.english ? `<div class="student-english">${student.english}</div>` : ''}
                        </div>
                        <button class="delete-btn" data-index="${index}">√ó</button>
                    `;
                    this.studentList.appendChild(studentItem);
                });
                
                // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
                this.pickBtn.disabled = this.isRepeatMode ? total === 0 : remaining === 0;
            }
        }

        // ÂàùÂßãÂåñÊäΩÁ≠æÁ≥ªÁªü
        const picker = new StudentPicker();
        
        // Á°Æ‰øùËØ≠Èü≥APIÂèØÁî®Êó∂Âä†ËΩΩËØ≠Èü≥ÂàóË°®
        if ('speechSynthesis' in window) {
            window.speechSynthesis.onvoiceschanged = () => {
                // ËØ≠Èü≥ÂàóË°®Â∑≤Âä†ËΩΩÔºåÊó†ÈúÄÈ¢ùÂ§ñÊìç‰Ωú
            };
        }
    </script>
</body>
</html>